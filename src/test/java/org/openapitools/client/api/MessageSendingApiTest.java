/*
 * WhatsAPI Go
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.InstancesInstanceKeySendAudioPostRequest;
import org.openapitools.client.model.InstancesInstanceKeySendDocumentPostRequest;
import org.openapitools.client.model.InstancesInstanceKeySendImagePostRequest;
import org.openapitools.client.model.InstancesInstanceKeySendUploadPostRequest;
import org.openapitools.client.model.InstancesInstanceKeySendVideoPostRequest;
import org.openapitools.client.model.MainAPIResponse;
import org.openapitools.client.model.StructsButtonMessagePayload;
import org.openapitools.client.model.StructsButtonMessageWithMediaPayload;
import org.openapitools.client.model.StructsContactMessagePayload;
import org.openapitools.client.model.StructsListMessagePayload;
import org.openapitools.client.model.StructsLocationMessagePayload;
import org.openapitools.client.model.StructsPollMessagePayload;
import org.openapitools.client.model.StructsSendMediaPayload;
import org.openapitools.client.model.StructsTemplateButtonPayload;
import org.openapitools.client.model.StructsTemplateButtonWithMediaPayload;
import org.openapitools.client.model.StructsTextMessage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessageSendingApi
 */
@Disabled
public class MessageSendingApiTest {

    private final MessageSendingApi api = new MessageSendingApi();

    /**
     * Fetches the catlog.
     *
     * Gets list of all products registered by you.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeyBusinessCatalogGetTest() throws ApiException {
        String instanceKey = null;
        MainAPIResponse response = api.instancesInstanceKeyBusinessCatalogGet(instanceKey);
        // TODO: test validations
    }

    /**
     * Send raw audio.
     *
     * Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeySendAudioPostTest() throws ApiException {
        String instanceKey = null;
        String to = null;
        InstancesInstanceKeySendAudioPostRequest instancesInstanceKeySendAudioPostRequest = null;
        String caption = null;
        MainAPIResponse response = api.instancesInstanceKeySendAudioPost(instanceKey, to, instancesInstanceKeySendAudioPostRequest, caption);
        // TODO: test validations
    }

    /**
     * Send a button message with a media header.
     *
     * Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeySendButtonMediaPostTest() throws ApiException {
        String instanceKey = null;
        StructsButtonMessageWithMediaPayload data = null;
        MainAPIResponse response = api.instancesInstanceKeySendButtonMediaPost(instanceKey, data);
        // TODO: test validations
    }

    /**
     * Send a button message.
     *
     * Sends an interactive button message to the given user. Make sure that all the button ids are unique
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeySendButtonsPostTest() throws ApiException {
        String instanceKey = null;
        StructsButtonMessagePayload data = null;
        MainAPIResponse response = api.instancesInstanceKeySendButtonsPost(instanceKey, data);
        // TODO: test validations
    }

    /**
     * Send a contact message.
     *
     * Sends a contact (vcard) message to the given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeySendContactPostTest() throws ApiException {
        String instanceKey = null;
        StructsContactMessagePayload data = null;
        MainAPIResponse response = api.instancesInstanceKeySendContactPost(instanceKey, data);
        // TODO: test validations
    }

    /**
     * Send raw document.
     *
     * Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeySendDocumentPostTest() throws ApiException {
        String instanceKey = null;
        String to = null;
        InstancesInstanceKeySendDocumentPostRequest instancesInstanceKeySendDocumentPostRequest = null;
        String caption = null;
        MainAPIResponse response = api.instancesInstanceKeySendDocumentPost(instanceKey, to, instancesInstanceKeySendDocumentPostRequest, caption);
        // TODO: test validations
    }

    /**
     * Send raw image.
     *
     * Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeySendImagePostTest() throws ApiException {
        String instanceKey = null;
        String to = null;
        InstancesInstanceKeySendImagePostRequest instancesInstanceKeySendImagePostRequest = null;
        String caption = null;
        MainAPIResponse response = api.instancesInstanceKeySendImagePost(instanceKey, to, instancesInstanceKeySendImagePostRequest, caption);
        // TODO: test validations
    }

    /**
     * Send a List message.
     *
     * Sends an interactive List message to the given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeySendListPostTest() throws ApiException {
        String instanceKey = null;
        StructsListMessagePayload data = null;
        MainAPIResponse response = api.instancesInstanceKeySendListPost(instanceKey, data);
        // TODO: test validations
    }

    /**
     * Send a location message.
     *
     * Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeySendLocationPostTest() throws ApiException {
        String instanceKey = null;
        StructsLocationMessagePayload data = null;
        MainAPIResponse response = api.instancesInstanceKeySendLocationPost(instanceKey, data);
        // TODO: test validations
    }

    /**
     * Send a media message.
     *
     * Sends a media message to the given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeySendMediaPostTest() throws ApiException {
        String instanceKey = null;
        StructsSendMediaPayload data = null;
        MainAPIResponse response = api.instancesInstanceKeySendMediaPost(instanceKey, data);
        // TODO: test validations
    }

    /**
     * Send a Poll message with media.
     *
     * Sends an interactive poll message with a media header to the given user. The poll message is a new feature that is currently in beta.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeySendPollPostTest() throws ApiException {
        String instanceKey = null;
        StructsPollMessagePayload data = null;
        MainAPIResponse response = api.instancesInstanceKeySendPollPost(instanceKey, data);
        // TODO: test validations
    }

    /**
     * Send a template message with media.
     *
     * Sends an interactive template message with a media header to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeySendTemplateMediaPostTest() throws ApiException {
        String instanceKey = null;
        StructsTemplateButtonWithMediaPayload data = null;
        MainAPIResponse response = api.instancesInstanceKeySendTemplateMediaPost(instanceKey, data);
        // TODO: test validations
    }

    /**
     * Send a template message.
     *
     * Sends an interactive template message to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeySendTemplatePostTest() throws ApiException {
        String instanceKey = null;
        StructsTemplateButtonPayload data = null;
        MainAPIResponse response = api.instancesInstanceKeySendTemplatePost(instanceKey, data);
        // TODO: test validations
    }

    /**
     * Send a text message.
     *
     * Sends a text message to the given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeySendTextPostTest() throws ApiException {
        String instanceKey = null;
        StructsTextMessage data = null;
        MainAPIResponse response = api.instancesInstanceKeySendTextPost(instanceKey, data);
        // TODO: test validations
    }

    /**
     * Upload media.
     *
     * Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeySendUploadPostTest() throws ApiException {
        String instanceKey = null;
        String type = null;
        InstancesInstanceKeySendUploadPostRequest instancesInstanceKeySendUploadPostRequest = null;
        MainAPIResponse response = api.instancesInstanceKeySendUploadPost(instanceKey, type, instancesInstanceKeySendUploadPostRequest);
        // TODO: test validations
    }

    /**
     * Send raw video.
     *
     * Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeySendVideoPostTest() throws ApiException {
        String instanceKey = null;
        String to = null;
        InstancesInstanceKeySendVideoPostRequest instancesInstanceKeySendVideoPostRequest = null;
        String caption = null;
        MainAPIResponse response = api.instancesInstanceKeySendVideoPost(instanceKey, to, instancesInstanceKeySendVideoPostRequest, caption);
        // TODO: test validations
    }

}
