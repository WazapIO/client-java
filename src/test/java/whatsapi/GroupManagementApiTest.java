/*
 * WhatsAPI Go
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package whatsapi;

import WhatsAPI.ApiException;
import models.InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest;
import models.MainAPIResponse;
import models.StructsGroupCreatePayload;
import models.StructsGroupUpdateDescriptionPayload;
import models.StructsGroupUpdateNamePayload;
import models.StructsGroupUpdateParticipantsPayload;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupManagementApi
 */
@Disabled
public class GroupManagementApiTest {

    private final GroupManagementApi api = new GroupManagementApi();

    /**
     * Get admin groupss.
     *
     * Returns list of all groups in which you are admin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeyGroupsAdminGetTest() throws ApiException {
        String instanceKey = null;
        MainAPIResponse response = api.instancesInstanceKeyGroupsAdminGet(instanceKey);
        // TODO: test validations
    }

    /**
     * Create group.
     *
     * Creates a group with the participant data. The creator is automatically added to the group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeyGroupsCreatePostTest() throws ApiException {
        String instanceKey = null;
        StructsGroupCreatePayload data = null;
        MainAPIResponse response = api.instancesInstanceKeyGroupsCreatePost(instanceKey, data);
        // TODO: test validations
    }

    /**
     * Get all groups.
     *
     * Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeyGroupsGetTest() throws ApiException {
        String instanceKey = null;
        String includeParticipants = null;
        MainAPIResponse response = api.instancesInstanceKeyGroupsGet(instanceKey, includeParticipants);
        // TODO: test validations
    }

    /**
     * Set group announce.
     *
     * Set if non-admins are allowed to send messages in groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeyGroupsGroupIdAnnouncePutTest() throws ApiException {
        String instanceKey = null;
        Boolean announce = null;
        String groupId = null;
        MainAPIResponse response = api.instancesInstanceKeyGroupsGroupIdAnnouncePut(instanceKey, announce, groupId);
        // TODO: test validations
    }

    /**
     * Leaves the group.
     *
     * Leaves the specified group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeyGroupsGroupIdDeleteTest() throws ApiException {
        String instanceKey = null;
        String groupId = null;
        MainAPIResponse response = api.instancesInstanceKeyGroupsGroupIdDelete(instanceKey, groupId);
        // TODO: test validations
    }

    /**
     * Set group description.
     *
     * Changes the group description
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeyGroupsGroupIdDescriptionPutTest() throws ApiException {
        String instanceKey = null;
        String groupId = null;
        StructsGroupUpdateDescriptionPayload data = null;
        MainAPIResponse response = api.instancesInstanceKeyGroupsGroupIdDescriptionPut(instanceKey, groupId, data);
        // TODO: test validations
    }

    /**
     * Get group.
     *
     * Fetches the group data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeyGroupsGroupIdGetTest() throws ApiException {
        String instanceKey = null;
        String groupId = null;
        MainAPIResponse response = api.instancesInstanceKeyGroupsGroupIdGet(instanceKey, groupId);
        // TODO: test validations
    }

    /**
     * Get group invite code.
     *
     * Gets the invite code of the group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeyGroupsGroupIdInviteCodeGetTest() throws ApiException {
        String instanceKey = null;
        String groupId = null;
        MainAPIResponse response = api.instancesInstanceKeyGroupsGroupIdInviteCodeGet(instanceKey, groupId);
        // TODO: test validations
    }

    /**
     * Set group locked.
     *
     * Set if non-admins are allowed to change the group dp and other stuff
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeyGroupsGroupIdLockPutTest() throws ApiException {
        String instanceKey = null;
        Boolean locked = null;
        String groupId = null;
        MainAPIResponse response = api.instancesInstanceKeyGroupsGroupIdLockPut(instanceKey, locked, groupId);
        // TODO: test validations
    }

    /**
     * Set group name.
     *
     * Changes the group name. The max limit is 22 chars
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeyGroupsGroupIdNamePutTest() throws ApiException {
        String instanceKey = null;
        String groupId = null;
        StructsGroupUpdateNamePayload data = null;
        MainAPIResponse response = api.instancesInstanceKeyGroupsGroupIdNamePut(instanceKey, groupId, data);
        // TODO: test validations
    }

    /**
     * Add participant.
     *
     * Handles adding participants to a group. You must be admin in the group or the query will fail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeyGroupsGroupIdParticipantsAddPostTest() throws ApiException {
        String instanceKey = null;
        String groupId = null;
        StructsGroupUpdateParticipantsPayload data = null;
        MainAPIResponse response = api.instancesInstanceKeyGroupsGroupIdParticipantsAddPost(instanceKey, groupId, data);
        // TODO: test validations
    }

    /**
     * Demote participant.
     *
     * Demotes admins in groups. You must be admin in the group or the query will fail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeyGroupsGroupIdParticipantsDemotePutTest() throws ApiException {
        String instanceKey = null;
        String groupId = null;
        StructsGroupUpdateParticipantsPayload data = null;
        MainAPIResponse response = api.instancesInstanceKeyGroupsGroupIdParticipantsDemotePut(instanceKey, groupId, data);
        // TODO: test validations
    }

    /**
     * Promote participant.
     *
     * Promotes participants to admin. You must be admin in the group or the query will fail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeyGroupsGroupIdParticipantsPromotePutTest() throws ApiException {
        String instanceKey = null;
        String groupId = null;
        StructsGroupUpdateParticipantsPayload data = null;
        MainAPIResponse response = api.instancesInstanceKeyGroupsGroupIdParticipantsPromotePut(instanceKey, groupId, data);
        // TODO: test validations
    }

    /**
     * Remove participant.
     *
     * Handles removing participants from a group. You must be admin in the group or the query will fail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteTest() throws ApiException {
        String instanceKey = null;
        String groupId = null;
        StructsGroupUpdateParticipantsPayload data = null;
        MainAPIResponse response = api.instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete(instanceKey, groupId, data);
        // TODO: test validations
    }

    /**
     * Set group picture.
     *
     * Changes the group profile picture. Currently it only seems to accept JPEG images only
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeyGroupsGroupIdProfilePicPutTest() throws ApiException {
        String instanceKey = null;
        String groupId = null;
        InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest instancesInstanceKeyGroupsGroupIdProfilePicPutRequest = null;
        MainAPIResponse response = api.instancesInstanceKeyGroupsGroupIdProfilePicPut(instanceKey, groupId, instancesInstanceKeyGroupsGroupIdProfilePicPutRequest);
        // TODO: test validations
    }

    /**
     * Get group from invite link.
     *
     * Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void instancesInstanceKeyGroupsInviteInfoGetTest() throws ApiException {
        String instanceKey = null;
        String inviteLink = null;
        MainAPIResponse response = api.instancesInstanceKeyGroupsInviteInfoGet(instanceKey, inviteLink);
        // TODO: test validations
    }

}
