/*
 * WhatsAPI Go
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest;
import org.openapitools.client.model.MainAPIResponse;
import org.openapitools.client.model.StructsGroupCreatePayload;
import org.openapitools.client.model.StructsGroupUpdateDescriptionPayload;
import org.openapitools.client.model.StructsGroupUpdateNamePayload;
import org.openapitools.client.model.StructsGroupUpdateParticipantsPayload;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GroupManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for instancesInstanceKeyGroupsAdminGet
     * @param instanceKey Instance key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsAdminGetCall(String instanceKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/groups/admin"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeyGroupsAdminGetValidateBeforeCall(String instanceKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeyGroupsAdminGet(Async)");
        }

        return instancesInstanceKeyGroupsAdminGetCall(instanceKey, _callback);

    }

    /**
     * Get admin groupss.
     * Returns list of all groups in which you are admin.
     * @param instanceKey Instance key (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeyGroupsAdminGet(String instanceKey) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeyGroupsAdminGetWithHttpInfo(instanceKey);
        return localVarResp.getData();
    }

    /**
     * Get admin groupss.
     * Returns list of all groups in which you are admin.
     * @param instanceKey Instance key (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeyGroupsAdminGetWithHttpInfo(String instanceKey) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeyGroupsAdminGetValidateBeforeCall(instanceKey, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get admin groupss. (asynchronously)
     * Returns list of all groups in which you are admin.
     * @param instanceKey Instance key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsAdminGetAsync(String instanceKey, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeyGroupsAdminGetValidateBeforeCall(instanceKey, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeyGroupsCreatePost
     * @param instanceKey Instance key (required)
     * @param data Group create payload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsCreatePostCall(String instanceKey, StructsGroupCreatePayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/groups/create"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeyGroupsCreatePostValidateBeforeCall(String instanceKey, StructsGroupCreatePayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeyGroupsCreatePost(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling instancesInstanceKeyGroupsCreatePost(Async)");
        }

        return instancesInstanceKeyGroupsCreatePostCall(instanceKey, data, _callback);

    }

    /**
     * Create group.
     * Creates a group with the participant data. The creator is automatically added to the group.
     * @param instanceKey Instance key (required)
     * @param data Group create payload (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeyGroupsCreatePost(String instanceKey, StructsGroupCreatePayload data) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeyGroupsCreatePostWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Create group.
     * Creates a group with the participant data. The creator is automatically added to the group.
     * @param instanceKey Instance key (required)
     * @param data Group create payload (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeyGroupsCreatePostWithHttpInfo(String instanceKey, StructsGroupCreatePayload data) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeyGroupsCreatePostValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create group. (asynchronously)
     * Creates a group with the participant data. The creator is automatically added to the group.
     * @param instanceKey Instance key (required)
     * @param data Group create payload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsCreatePostAsync(String instanceKey, StructsGroupCreatePayload data, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeyGroupsCreatePostValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeyGroupsGet
     * @param instanceKey Instance key (required)
     * @param includeParticipants Include participants data (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGetCall(String instanceKey, String includeParticipants, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/groups/"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeParticipants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_participants", includeParticipants));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeyGroupsGetValidateBeforeCall(String instanceKey, String includeParticipants, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeyGroupsGet(Async)");
        }

        return instancesInstanceKeyGroupsGetCall(instanceKey, includeParticipants, _callback);

    }

    /**
     * Get all groups.
     * Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
     * @param instanceKey Instance key (required)
     * @param includeParticipants Include participants data (optional, default to true)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeyGroupsGet(String instanceKey, String includeParticipants) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeyGroupsGetWithHttpInfo(instanceKey, includeParticipants);
        return localVarResp.getData();
    }

    /**
     * Get all groups.
     * Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
     * @param instanceKey Instance key (required)
     * @param includeParticipants Include participants data (optional, default to true)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeyGroupsGetWithHttpInfo(String instanceKey, String includeParticipants) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGetValidateBeforeCall(instanceKey, includeParticipants, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all groups. (asynchronously)
     * Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
     * @param instanceKey Instance key (required)
     * @param includeParticipants Include participants data (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGetAsync(String instanceKey, String includeParticipants, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGetValidateBeforeCall(instanceKey, includeParticipants, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeyGroupsGroupIdAnnouncePut
     * @param instanceKey Instance key (required)
     * @param announce Announce status (required)
     * @param groupId Group id of the group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdAnnouncePutCall(String instanceKey, Boolean announce, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/groups/{group_id}/announce"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()))
            .replace("{" + "announce" + "}", localVarApiClient.escapeString(announce.toString()))
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeyGroupsGroupIdAnnouncePutValidateBeforeCall(String instanceKey, Boolean announce, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeyGroupsGroupIdAnnouncePut(Async)");
        }

        // verify the required parameter 'announce' is set
        if (announce == null) {
            throw new ApiException("Missing the required parameter 'announce' when calling instancesInstanceKeyGroupsGroupIdAnnouncePut(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling instancesInstanceKeyGroupsGroupIdAnnouncePut(Async)");
        }

        return instancesInstanceKeyGroupsGroupIdAnnouncePutCall(instanceKey, announce, groupId, _callback);

    }

    /**
     * Set group announce.
     * Set if non-admins are allowed to send messages in groups
     * @param instanceKey Instance key (required)
     * @param announce Announce status (required)
     * @param groupId Group id of the group (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeyGroupsGroupIdAnnouncePut(String instanceKey, Boolean announce, String groupId) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeyGroupsGroupIdAnnouncePutWithHttpInfo(instanceKey, announce, groupId);
        return localVarResp.getData();
    }

    /**
     * Set group announce.
     * Set if non-admins are allowed to send messages in groups
     * @param instanceKey Instance key (required)
     * @param announce Announce status (required)
     * @param groupId Group id of the group (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeyGroupsGroupIdAnnouncePutWithHttpInfo(String instanceKey, Boolean announce, String groupId) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdAnnouncePutValidateBeforeCall(instanceKey, announce, groupId, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set group announce. (asynchronously)
     * Set if non-admins are allowed to send messages in groups
     * @param instanceKey Instance key (required)
     * @param announce Announce status (required)
     * @param groupId Group id of the group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdAnnouncePutAsync(String instanceKey, Boolean announce, String groupId, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdAnnouncePutValidateBeforeCall(instanceKey, announce, groupId, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeyGroupsGroupIdDelete
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdDeleteCall(String instanceKey, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/groups/{group_id}/"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()))
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeyGroupsGroupIdDeleteValidateBeforeCall(String instanceKey, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeyGroupsGroupIdDelete(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling instancesInstanceKeyGroupsGroupIdDelete(Async)");
        }

        return instancesInstanceKeyGroupsGroupIdDeleteCall(instanceKey, groupId, _callback);

    }

    /**
     * Leaves the group.
     * Leaves the specified group.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeyGroupsGroupIdDelete(String instanceKey, String groupId) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeyGroupsGroupIdDeleteWithHttpInfo(instanceKey, groupId);
        return localVarResp.getData();
    }

    /**
     * Leaves the group.
     * Leaves the specified group.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeyGroupsGroupIdDeleteWithHttpInfo(String instanceKey, String groupId) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdDeleteValidateBeforeCall(instanceKey, groupId, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Leaves the group. (asynchronously)
     * Leaves the specified group.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdDeleteAsync(String instanceKey, String groupId, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdDeleteValidateBeforeCall(instanceKey, groupId, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeyGroupsGroupIdDescriptionPut
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group description data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdDescriptionPutCall(String instanceKey, String groupId, StructsGroupUpdateDescriptionPayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/groups/{group_id}/description"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()))
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeyGroupsGroupIdDescriptionPutValidateBeforeCall(String instanceKey, String groupId, StructsGroupUpdateDescriptionPayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeyGroupsGroupIdDescriptionPut(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling instancesInstanceKeyGroupsGroupIdDescriptionPut(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling instancesInstanceKeyGroupsGroupIdDescriptionPut(Async)");
        }

        return instancesInstanceKeyGroupsGroupIdDescriptionPutCall(instanceKey, groupId, data, _callback);

    }

    /**
     * Set group description.
     * Changes the group description
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group description data (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeyGroupsGroupIdDescriptionPut(String instanceKey, String groupId, StructsGroupUpdateDescriptionPayload data) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeyGroupsGroupIdDescriptionPutWithHttpInfo(instanceKey, groupId, data);
        return localVarResp.getData();
    }

    /**
     * Set group description.
     * Changes the group description
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group description data (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeyGroupsGroupIdDescriptionPutWithHttpInfo(String instanceKey, String groupId, StructsGroupUpdateDescriptionPayload data) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdDescriptionPutValidateBeforeCall(instanceKey, groupId, data, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set group description. (asynchronously)
     * Changes the group description
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group description data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdDescriptionPutAsync(String instanceKey, String groupId, StructsGroupUpdateDescriptionPayload data, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdDescriptionPutValidateBeforeCall(instanceKey, groupId, data, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeyGroupsGroupIdGet
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdGetCall(String instanceKey, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/groups/{group_id}"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()))
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeyGroupsGroupIdGetValidateBeforeCall(String instanceKey, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeyGroupsGroupIdGet(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling instancesInstanceKeyGroupsGroupIdGet(Async)");
        }

        return instancesInstanceKeyGroupsGroupIdGetCall(instanceKey, groupId, _callback);

    }

    /**
     * Get group.
     * Fetches the group data.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeyGroupsGroupIdGet(String instanceKey, String groupId) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeyGroupsGroupIdGetWithHttpInfo(instanceKey, groupId);
        return localVarResp.getData();
    }

    /**
     * Get group.
     * Fetches the group data.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeyGroupsGroupIdGetWithHttpInfo(String instanceKey, String groupId) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdGetValidateBeforeCall(instanceKey, groupId, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get group. (asynchronously)
     * Fetches the group data.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdGetAsync(String instanceKey, String groupId, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdGetValidateBeforeCall(instanceKey, groupId, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeyGroupsGroupIdInviteCodeGet
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdInviteCodeGetCall(String instanceKey, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/groups/{group_id}/invite-code"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()))
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeyGroupsGroupIdInviteCodeGetValidateBeforeCall(String instanceKey, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeyGroupsGroupIdInviteCodeGet(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling instancesInstanceKeyGroupsGroupIdInviteCodeGet(Async)");
        }

        return instancesInstanceKeyGroupsGroupIdInviteCodeGetCall(instanceKey, groupId, _callback);

    }

    /**
     * Get group invite code.
     * Gets the invite code of the group.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeyGroupsGroupIdInviteCodeGet(String instanceKey, String groupId) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeyGroupsGroupIdInviteCodeGetWithHttpInfo(instanceKey, groupId);
        return localVarResp.getData();
    }

    /**
     * Get group invite code.
     * Gets the invite code of the group.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeyGroupsGroupIdInviteCodeGetWithHttpInfo(String instanceKey, String groupId) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdInviteCodeGetValidateBeforeCall(instanceKey, groupId, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get group invite code. (asynchronously)
     * Gets the invite code of the group.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdInviteCodeGetAsync(String instanceKey, String groupId, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdInviteCodeGetValidateBeforeCall(instanceKey, groupId, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeyGroupsGroupIdLockPut
     * @param instanceKey Instance key (required)
     * @param locked Locked status (required)
     * @param groupId Group id of the group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdLockPutCall(String instanceKey, Boolean locked, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/groups/{group_id}/lock"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()))
            .replace("{" + "locked" + "}", localVarApiClient.escapeString(locked.toString()))
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeyGroupsGroupIdLockPutValidateBeforeCall(String instanceKey, Boolean locked, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeyGroupsGroupIdLockPut(Async)");
        }

        // verify the required parameter 'locked' is set
        if (locked == null) {
            throw new ApiException("Missing the required parameter 'locked' when calling instancesInstanceKeyGroupsGroupIdLockPut(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling instancesInstanceKeyGroupsGroupIdLockPut(Async)");
        }

        return instancesInstanceKeyGroupsGroupIdLockPutCall(instanceKey, locked, groupId, _callback);

    }

    /**
     * Set group locked.
     * Set if non-admins are allowed to change the group dp and other stuff
     * @param instanceKey Instance key (required)
     * @param locked Locked status (required)
     * @param groupId Group id of the group (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeyGroupsGroupIdLockPut(String instanceKey, Boolean locked, String groupId) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeyGroupsGroupIdLockPutWithHttpInfo(instanceKey, locked, groupId);
        return localVarResp.getData();
    }

    /**
     * Set group locked.
     * Set if non-admins are allowed to change the group dp and other stuff
     * @param instanceKey Instance key (required)
     * @param locked Locked status (required)
     * @param groupId Group id of the group (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeyGroupsGroupIdLockPutWithHttpInfo(String instanceKey, Boolean locked, String groupId) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdLockPutValidateBeforeCall(instanceKey, locked, groupId, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set group locked. (asynchronously)
     * Set if non-admins are allowed to change the group dp and other stuff
     * @param instanceKey Instance key (required)
     * @param locked Locked status (required)
     * @param groupId Group id of the group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdLockPutAsync(String instanceKey, Boolean locked, String groupId, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdLockPutValidateBeforeCall(instanceKey, locked, groupId, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeyGroupsGroupIdNamePut
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group name data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdNamePutCall(String instanceKey, String groupId, StructsGroupUpdateNamePayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/groups/{group_id}/name"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()))
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeyGroupsGroupIdNamePutValidateBeforeCall(String instanceKey, String groupId, StructsGroupUpdateNamePayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeyGroupsGroupIdNamePut(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling instancesInstanceKeyGroupsGroupIdNamePut(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling instancesInstanceKeyGroupsGroupIdNamePut(Async)");
        }

        return instancesInstanceKeyGroupsGroupIdNamePutCall(instanceKey, groupId, data, _callback);

    }

    /**
     * Set group name.
     * Changes the group name. The max limit is 22 chars
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group name data (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeyGroupsGroupIdNamePut(String instanceKey, String groupId, StructsGroupUpdateNamePayload data) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeyGroupsGroupIdNamePutWithHttpInfo(instanceKey, groupId, data);
        return localVarResp.getData();
    }

    /**
     * Set group name.
     * Changes the group name. The max limit is 22 chars
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group name data (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeyGroupsGroupIdNamePutWithHttpInfo(String instanceKey, String groupId, StructsGroupUpdateNamePayload data) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdNamePutValidateBeforeCall(instanceKey, groupId, data, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set group name. (asynchronously)
     * Changes the group name. The max limit is 22 chars
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group name data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdNamePutAsync(String instanceKey, String groupId, StructsGroupUpdateNamePayload data, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdNamePutValidateBeforeCall(instanceKey, groupId, data, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeyGroupsGroupIdParticipantsAddPost
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group update payload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdParticipantsAddPostCall(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/add"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()))
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeyGroupsGroupIdParticipantsAddPostValidateBeforeCall(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeyGroupsGroupIdParticipantsAddPost(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling instancesInstanceKeyGroupsGroupIdParticipantsAddPost(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling instancesInstanceKeyGroupsGroupIdParticipantsAddPost(Async)");
        }

        return instancesInstanceKeyGroupsGroupIdParticipantsAddPostCall(instanceKey, groupId, data, _callback);

    }

    /**
     * Add participant.
     * Handles adding participants to a group. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group update payload (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeyGroupsGroupIdParticipantsAddPost(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeyGroupsGroupIdParticipantsAddPostWithHttpInfo(instanceKey, groupId, data);
        return localVarResp.getData();
    }

    /**
     * Add participant.
     * Handles adding participants to a group. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group update payload (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeyGroupsGroupIdParticipantsAddPostWithHttpInfo(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdParticipantsAddPostValidateBeforeCall(instanceKey, groupId, data, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add participant. (asynchronously)
     * Handles adding participants to a group. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group update payload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdParticipantsAddPostAsync(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdParticipantsAddPostValidateBeforeCall(instanceKey, groupId, data, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeyGroupsGroupIdParticipantsDemotePut
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group update payload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdParticipantsDemotePutCall(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/demote"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()))
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeyGroupsGroupIdParticipantsDemotePutValidateBeforeCall(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeyGroupsGroupIdParticipantsDemotePut(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling instancesInstanceKeyGroupsGroupIdParticipantsDemotePut(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling instancesInstanceKeyGroupsGroupIdParticipantsDemotePut(Async)");
        }

        return instancesInstanceKeyGroupsGroupIdParticipantsDemotePutCall(instanceKey, groupId, data, _callback);

    }

    /**
     * Demote participant.
     * Demotes admins in groups. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group update payload (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeyGroupsGroupIdParticipantsDemotePut(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeyGroupsGroupIdParticipantsDemotePutWithHttpInfo(instanceKey, groupId, data);
        return localVarResp.getData();
    }

    /**
     * Demote participant.
     * Demotes admins in groups. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group update payload (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeyGroupsGroupIdParticipantsDemotePutWithHttpInfo(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdParticipantsDemotePutValidateBeforeCall(instanceKey, groupId, data, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Demote participant. (asynchronously)
     * Demotes admins in groups. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group update payload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdParticipantsDemotePutAsync(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdParticipantsDemotePutValidateBeforeCall(instanceKey, groupId, data, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeyGroupsGroupIdParticipantsPromotePut
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group update payload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdParticipantsPromotePutCall(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/promote"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()))
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeyGroupsGroupIdParticipantsPromotePutValidateBeforeCall(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeyGroupsGroupIdParticipantsPromotePut(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling instancesInstanceKeyGroupsGroupIdParticipantsPromotePut(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling instancesInstanceKeyGroupsGroupIdParticipantsPromotePut(Async)");
        }

        return instancesInstanceKeyGroupsGroupIdParticipantsPromotePutCall(instanceKey, groupId, data, _callback);

    }

    /**
     * Promote participant.
     * Promotes participants to admin. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group update payload (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeyGroupsGroupIdParticipantsPromotePut(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeyGroupsGroupIdParticipantsPromotePutWithHttpInfo(instanceKey, groupId, data);
        return localVarResp.getData();
    }

    /**
     * Promote participant.
     * Promotes participants to admin. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group update payload (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeyGroupsGroupIdParticipantsPromotePutWithHttpInfo(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdParticipantsPromotePutValidateBeforeCall(instanceKey, groupId, data, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Promote participant. (asynchronously)
     * Promotes participants to admin. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group update payload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdParticipantsPromotePutAsync(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdParticipantsPromotePutValidateBeforeCall(instanceKey, groupId, data, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group update payload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteCall(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/groups/{group_id}/participants/remove"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()))
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteValidateBeforeCall(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete(Async)");
        }

        return instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteCall(instanceKey, groupId, data, _callback);

    }

    /**
     * Remove participant.
     * Handles removing participants from a group. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group update payload (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteWithHttpInfo(instanceKey, groupId, data);
        return localVarResp.getData();
    }

    /**
     * Remove participant.
     * Handles removing participants from a group. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group update payload (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteWithHttpInfo(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteValidateBeforeCall(instanceKey, groupId, data, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove participant. (asynchronously)
     * Handles removing participants from a group. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param data Group update payload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteAsync(String instanceKey, String groupId, StructsGroupUpdateParticipantsPayload data, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteValidateBeforeCall(instanceKey, groupId, data, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeyGroupsGroupIdProfilePicPut
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param instancesInstanceKeyGroupsGroupIdProfilePicPutRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdProfilePicPutCall(String instanceKey, String groupId, InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest instancesInstanceKeyGroupsGroupIdProfilePicPutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = instancesInstanceKeyGroupsGroupIdProfilePicPutRequest;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/groups/{group_id}/profile-pic"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()))
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeyGroupsGroupIdProfilePicPutValidateBeforeCall(String instanceKey, String groupId, InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest instancesInstanceKeyGroupsGroupIdProfilePicPutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeyGroupsGroupIdProfilePicPut(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling instancesInstanceKeyGroupsGroupIdProfilePicPut(Async)");
        }

        // verify the required parameter 'instancesInstanceKeyGroupsGroupIdProfilePicPutRequest' is set
        if (instancesInstanceKeyGroupsGroupIdProfilePicPutRequest == null) {
            throw new ApiException("Missing the required parameter 'instancesInstanceKeyGroupsGroupIdProfilePicPutRequest' when calling instancesInstanceKeyGroupsGroupIdProfilePicPut(Async)");
        }

        return instancesInstanceKeyGroupsGroupIdProfilePicPutCall(instanceKey, groupId, instancesInstanceKeyGroupsGroupIdProfilePicPutRequest, _callback);

    }

    /**
     * Set group picture.
     * Changes the group profile picture. Currently it only seems to accept JPEG images only
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param instancesInstanceKeyGroupsGroupIdProfilePicPutRequest  (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeyGroupsGroupIdProfilePicPut(String instanceKey, String groupId, InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest instancesInstanceKeyGroupsGroupIdProfilePicPutRequest) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeyGroupsGroupIdProfilePicPutWithHttpInfo(instanceKey, groupId, instancesInstanceKeyGroupsGroupIdProfilePicPutRequest);
        return localVarResp.getData();
    }

    /**
     * Set group picture.
     * Changes the group profile picture. Currently it only seems to accept JPEG images only
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param instancesInstanceKeyGroupsGroupIdProfilePicPutRequest  (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeyGroupsGroupIdProfilePicPutWithHttpInfo(String instanceKey, String groupId, InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest instancesInstanceKeyGroupsGroupIdProfilePicPutRequest) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdProfilePicPutValidateBeforeCall(instanceKey, groupId, instancesInstanceKeyGroupsGroupIdProfilePicPutRequest, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set group picture. (asynchronously)
     * Changes the group profile picture. Currently it only seems to accept JPEG images only
     * @param instanceKey Instance key (required)
     * @param groupId Group id of the group (required)
     * @param instancesInstanceKeyGroupsGroupIdProfilePicPutRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsGroupIdProfilePicPutAsync(String instanceKey, String groupId, InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest instancesInstanceKeyGroupsGroupIdProfilePicPutRequest, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeyGroupsGroupIdProfilePicPutValidateBeforeCall(instanceKey, groupId, instancesInstanceKeyGroupsGroupIdProfilePicPutRequest, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeyGroupsInviteInfoGet
     * @param instanceKey Instance key (required)
     * @param inviteLink The invite link to check (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsInviteInfoGetCall(String instanceKey, String inviteLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/groups/invite-info"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inviteLink != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invite_link", inviteLink));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeyGroupsInviteInfoGetValidateBeforeCall(String instanceKey, String inviteLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeyGroupsInviteInfoGet(Async)");
        }

        // verify the required parameter 'inviteLink' is set
        if (inviteLink == null) {
            throw new ApiException("Missing the required parameter 'inviteLink' when calling instancesInstanceKeyGroupsInviteInfoGet(Async)");
        }

        return instancesInstanceKeyGroupsInviteInfoGetCall(instanceKey, inviteLink, _callback);

    }

    /**
     * Get group from invite link.
     * Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
     * @param instanceKey Instance key (required)
     * @param inviteLink The invite link to check (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeyGroupsInviteInfoGet(String instanceKey, String inviteLink) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeyGroupsInviteInfoGetWithHttpInfo(instanceKey, inviteLink);
        return localVarResp.getData();
    }

    /**
     * Get group from invite link.
     * Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
     * @param instanceKey Instance key (required)
     * @param inviteLink The invite link to check (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeyGroupsInviteInfoGetWithHttpInfo(String instanceKey, String inviteLink) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeyGroupsInviteInfoGetValidateBeforeCall(instanceKey, inviteLink, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get group from invite link. (asynchronously)
     * Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
     * @param instanceKey Instance key (required)
     * @param inviteLink The invite link to check (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyGroupsInviteInfoGetAsync(String instanceKey, String inviteLink, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeyGroupsInviteInfoGetValidateBeforeCall(instanceKey, inviteLink, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
