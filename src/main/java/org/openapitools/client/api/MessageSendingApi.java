/*
 * WhatsAPI Go
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InstancesInstanceKeySendAudioPostRequest;
import org.openapitools.client.model.InstancesInstanceKeySendDocumentPostRequest;
import org.openapitools.client.model.InstancesInstanceKeySendImagePostRequest;
import org.openapitools.client.model.InstancesInstanceKeySendUploadPostRequest;
import org.openapitools.client.model.InstancesInstanceKeySendVideoPostRequest;
import org.openapitools.client.model.MainAPIResponse;
import org.openapitools.client.model.StructsButtonMessagePayload;
import org.openapitools.client.model.StructsButtonMessageWithMediaPayload;
import org.openapitools.client.model.StructsContactMessagePayload;
import org.openapitools.client.model.StructsListMessagePayload;
import org.openapitools.client.model.StructsLocationMessagePayload;
import org.openapitools.client.model.StructsPollMessagePayload;
import org.openapitools.client.model.StructsSendMediaPayload;
import org.openapitools.client.model.StructsTemplateButtonPayload;
import org.openapitools.client.model.StructsTemplateButtonWithMediaPayload;
import org.openapitools.client.model.StructsTextMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MessageSendingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessageSendingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessageSendingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for instancesInstanceKeyBusinessCatalogGet
     * @param instanceKey Instance key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyBusinessCatalogGetCall(String instanceKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/business/catalog"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeyBusinessCatalogGetValidateBeforeCall(String instanceKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeyBusinessCatalogGet(Async)");
        }

        return instancesInstanceKeyBusinessCatalogGetCall(instanceKey, _callback);

    }

    /**
     * Fetches the catlog.
     * Gets list of all products registered by you.
     * @param instanceKey Instance key (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeyBusinessCatalogGet(String instanceKey) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeyBusinessCatalogGetWithHttpInfo(instanceKey);
        return localVarResp.getData();
    }

    /**
     * Fetches the catlog.
     * Gets list of all products registered by you.
     * @param instanceKey Instance key (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeyBusinessCatalogGetWithHttpInfo(String instanceKey) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeyBusinessCatalogGetValidateBeforeCall(instanceKey, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetches the catlog. (asynchronously)
     * Gets list of all products registered by you.
     * @param instanceKey Instance key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeyBusinessCatalogGetAsync(String instanceKey, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeyBusinessCatalogGetValidateBeforeCall(instanceKey, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeySendAudioPost
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param instancesInstanceKeySendAudioPostRequest  (required)
     * @param caption Attached caption (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendAudioPostCall(String instanceKey, String to, InstancesInstanceKeySendAudioPostRequest instancesInstanceKeySendAudioPostRequest, String caption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = instancesInstanceKeySendAudioPostRequest;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/audio"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (caption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caption", caption));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeySendAudioPostValidateBeforeCall(String instanceKey, String to, InstancesInstanceKeySendAudioPostRequest instancesInstanceKeySendAudioPostRequest, String caption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeySendAudioPost(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling instancesInstanceKeySendAudioPost(Async)");
        }

        // verify the required parameter 'instancesInstanceKeySendAudioPostRequest' is set
        if (instancesInstanceKeySendAudioPostRequest == null) {
            throw new ApiException("Missing the required parameter 'instancesInstanceKeySendAudioPostRequest' when calling instancesInstanceKeySendAudioPost(Async)");
        }

        return instancesInstanceKeySendAudioPostCall(instanceKey, to, instancesInstanceKeySendAudioPostRequest, caption, _callback);

    }

    /**
     * Send raw audio.
     * Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param instancesInstanceKeySendAudioPostRequest  (required)
     * @param caption Attached caption (optional)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeySendAudioPost(String instanceKey, String to, InstancesInstanceKeySendAudioPostRequest instancesInstanceKeySendAudioPostRequest, String caption) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeySendAudioPostWithHttpInfo(instanceKey, to, instancesInstanceKeySendAudioPostRequest, caption);
        return localVarResp.getData();
    }

    /**
     * Send raw audio.
     * Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param instancesInstanceKeySendAudioPostRequest  (required)
     * @param caption Attached caption (optional)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeySendAudioPostWithHttpInfo(String instanceKey, String to, InstancesInstanceKeySendAudioPostRequest instancesInstanceKeySendAudioPostRequest, String caption) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeySendAudioPostValidateBeforeCall(instanceKey, to, instancesInstanceKeySendAudioPostRequest, caption, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send raw audio. (asynchronously)
     * Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param instancesInstanceKeySendAudioPostRequest  (required)
     * @param caption Attached caption (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendAudioPostAsync(String instanceKey, String to, InstancesInstanceKeySendAudioPostRequest instancesInstanceKeySendAudioPostRequest, String caption, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeySendAudioPostValidateBeforeCall(instanceKey, to, instancesInstanceKeySendAudioPostRequest, caption, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeySendButtonMediaPost
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendButtonMediaPostCall(String instanceKey, StructsButtonMessageWithMediaPayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/button-media"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeySendButtonMediaPostValidateBeforeCall(String instanceKey, StructsButtonMessageWithMediaPayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeySendButtonMediaPost(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling instancesInstanceKeySendButtonMediaPost(Async)");
        }

        return instancesInstanceKeySendButtonMediaPostCall(instanceKey, data, _callback);

    }

    /**
     * Send a button message with a media header.
     * Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeySendButtonMediaPost(String instanceKey, StructsButtonMessageWithMediaPayload data) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeySendButtonMediaPostWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a button message with a media header.
     * Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeySendButtonMediaPostWithHttpInfo(String instanceKey, StructsButtonMessageWithMediaPayload data) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeySendButtonMediaPostValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a button message with a media header. (asynchronously)
     * Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendButtonMediaPostAsync(String instanceKey, StructsButtonMessageWithMediaPayload data, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeySendButtonMediaPostValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeySendButtonsPost
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendButtonsPostCall(String instanceKey, StructsButtonMessagePayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/buttons"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeySendButtonsPostValidateBeforeCall(String instanceKey, StructsButtonMessagePayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeySendButtonsPost(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling instancesInstanceKeySendButtonsPost(Async)");
        }

        return instancesInstanceKeySendButtonsPostCall(instanceKey, data, _callback);

    }

    /**
     * Send a button message.
     * Sends an interactive button message to the given user. Make sure that all the button ids are unique
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeySendButtonsPost(String instanceKey, StructsButtonMessagePayload data) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeySendButtonsPostWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a button message.
     * Sends an interactive button message to the given user. Make sure that all the button ids are unique
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeySendButtonsPostWithHttpInfo(String instanceKey, StructsButtonMessagePayload data) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeySendButtonsPostValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a button message. (asynchronously)
     * Sends an interactive button message to the given user. Make sure that all the button ids are unique
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendButtonsPostAsync(String instanceKey, StructsButtonMessagePayload data, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeySendButtonsPostValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeySendContactPost
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendContactPostCall(String instanceKey, StructsContactMessagePayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/contact"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeySendContactPostValidateBeforeCall(String instanceKey, StructsContactMessagePayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeySendContactPost(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling instancesInstanceKeySendContactPost(Async)");
        }

        return instancesInstanceKeySendContactPostCall(instanceKey, data, _callback);

    }

    /**
     * Send a contact message.
     * Sends a contact (vcard) message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeySendContactPost(String instanceKey, StructsContactMessagePayload data) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeySendContactPostWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a contact message.
     * Sends a contact (vcard) message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeySendContactPostWithHttpInfo(String instanceKey, StructsContactMessagePayload data) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeySendContactPostValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a contact message. (asynchronously)
     * Sends a contact (vcard) message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendContactPostAsync(String instanceKey, StructsContactMessagePayload data, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeySendContactPostValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeySendDocumentPost
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param instancesInstanceKeySendDocumentPostRequest  (required)
     * @param caption Attached caption (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendDocumentPostCall(String instanceKey, String to, InstancesInstanceKeySendDocumentPostRequest instancesInstanceKeySendDocumentPostRequest, String caption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = instancesInstanceKeySendDocumentPostRequest;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/document"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (caption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caption", caption));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeySendDocumentPostValidateBeforeCall(String instanceKey, String to, InstancesInstanceKeySendDocumentPostRequest instancesInstanceKeySendDocumentPostRequest, String caption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeySendDocumentPost(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling instancesInstanceKeySendDocumentPost(Async)");
        }

        // verify the required parameter 'instancesInstanceKeySendDocumentPostRequest' is set
        if (instancesInstanceKeySendDocumentPostRequest == null) {
            throw new ApiException("Missing the required parameter 'instancesInstanceKeySendDocumentPostRequest' when calling instancesInstanceKeySendDocumentPost(Async)");
        }

        return instancesInstanceKeySendDocumentPostCall(instanceKey, to, instancesInstanceKeySendDocumentPostRequest, caption, _callback);

    }

    /**
     * Send raw document.
     * Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param instancesInstanceKeySendDocumentPostRequest  (required)
     * @param caption Attached caption (optional)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeySendDocumentPost(String instanceKey, String to, InstancesInstanceKeySendDocumentPostRequest instancesInstanceKeySendDocumentPostRequest, String caption) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeySendDocumentPostWithHttpInfo(instanceKey, to, instancesInstanceKeySendDocumentPostRequest, caption);
        return localVarResp.getData();
    }

    /**
     * Send raw document.
     * Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param instancesInstanceKeySendDocumentPostRequest  (required)
     * @param caption Attached caption (optional)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeySendDocumentPostWithHttpInfo(String instanceKey, String to, InstancesInstanceKeySendDocumentPostRequest instancesInstanceKeySendDocumentPostRequest, String caption) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeySendDocumentPostValidateBeforeCall(instanceKey, to, instancesInstanceKeySendDocumentPostRequest, caption, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send raw document. (asynchronously)
     * Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param instancesInstanceKeySendDocumentPostRequest  (required)
     * @param caption Attached caption (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendDocumentPostAsync(String instanceKey, String to, InstancesInstanceKeySendDocumentPostRequest instancesInstanceKeySendDocumentPostRequest, String caption, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeySendDocumentPostValidateBeforeCall(instanceKey, to, instancesInstanceKeySendDocumentPostRequest, caption, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeySendImagePost
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param instancesInstanceKeySendImagePostRequest  (required)
     * @param caption Attached caption (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendImagePostCall(String instanceKey, String to, InstancesInstanceKeySendImagePostRequest instancesInstanceKeySendImagePostRequest, String caption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = instancesInstanceKeySendImagePostRequest;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/image"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (caption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caption", caption));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeySendImagePostValidateBeforeCall(String instanceKey, String to, InstancesInstanceKeySendImagePostRequest instancesInstanceKeySendImagePostRequest, String caption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeySendImagePost(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling instancesInstanceKeySendImagePost(Async)");
        }

        // verify the required parameter 'instancesInstanceKeySendImagePostRequest' is set
        if (instancesInstanceKeySendImagePostRequest == null) {
            throw new ApiException("Missing the required parameter 'instancesInstanceKeySendImagePostRequest' when calling instancesInstanceKeySendImagePost(Async)");
        }

        return instancesInstanceKeySendImagePostCall(instanceKey, to, instancesInstanceKeySendImagePostRequest, caption, _callback);

    }

    /**
     * Send raw image.
     * Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param instancesInstanceKeySendImagePostRequest  (required)
     * @param caption Attached caption (optional)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeySendImagePost(String instanceKey, String to, InstancesInstanceKeySendImagePostRequest instancesInstanceKeySendImagePostRequest, String caption) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeySendImagePostWithHttpInfo(instanceKey, to, instancesInstanceKeySendImagePostRequest, caption);
        return localVarResp.getData();
    }

    /**
     * Send raw image.
     * Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param instancesInstanceKeySendImagePostRequest  (required)
     * @param caption Attached caption (optional)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeySendImagePostWithHttpInfo(String instanceKey, String to, InstancesInstanceKeySendImagePostRequest instancesInstanceKeySendImagePostRequest, String caption) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeySendImagePostValidateBeforeCall(instanceKey, to, instancesInstanceKeySendImagePostRequest, caption, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send raw image. (asynchronously)
     * Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param instancesInstanceKeySendImagePostRequest  (required)
     * @param caption Attached caption (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendImagePostAsync(String instanceKey, String to, InstancesInstanceKeySendImagePostRequest instancesInstanceKeySendImagePostRequest, String caption, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeySendImagePostValidateBeforeCall(instanceKey, to, instancesInstanceKeySendImagePostRequest, caption, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeySendListPost
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendListPostCall(String instanceKey, StructsListMessagePayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/list"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeySendListPostValidateBeforeCall(String instanceKey, StructsListMessagePayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeySendListPost(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling instancesInstanceKeySendListPost(Async)");
        }

        return instancesInstanceKeySendListPostCall(instanceKey, data, _callback);

    }

    /**
     * Send a List message.
     * Sends an interactive List message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeySendListPost(String instanceKey, StructsListMessagePayload data) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeySendListPostWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a List message.
     * Sends an interactive List message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeySendListPostWithHttpInfo(String instanceKey, StructsListMessagePayload data) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeySendListPostValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a List message. (asynchronously)
     * Sends an interactive List message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendListPostAsync(String instanceKey, StructsListMessagePayload data, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeySendListPostValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeySendLocationPost
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendLocationPostCall(String instanceKey, StructsLocationMessagePayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/location"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeySendLocationPostValidateBeforeCall(String instanceKey, StructsLocationMessagePayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeySendLocationPost(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling instancesInstanceKeySendLocationPost(Async)");
        }

        return instancesInstanceKeySendLocationPostCall(instanceKey, data, _callback);

    }

    /**
     * Send a location message.
     * Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeySendLocationPost(String instanceKey, StructsLocationMessagePayload data) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeySendLocationPostWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a location message.
     * Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeySendLocationPostWithHttpInfo(String instanceKey, StructsLocationMessagePayload data) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeySendLocationPostValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a location message. (asynchronously)
     * Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendLocationPostAsync(String instanceKey, StructsLocationMessagePayload data, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeySendLocationPostValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeySendMediaPost
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendMediaPostCall(String instanceKey, StructsSendMediaPayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/media"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeySendMediaPostValidateBeforeCall(String instanceKey, StructsSendMediaPayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeySendMediaPost(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling instancesInstanceKeySendMediaPost(Async)");
        }

        return instancesInstanceKeySendMediaPostCall(instanceKey, data, _callback);

    }

    /**
     * Send a media message.
     * Sends a media message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeySendMediaPost(String instanceKey, StructsSendMediaPayload data) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeySendMediaPostWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a media message.
     * Sends a media message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeySendMediaPostWithHttpInfo(String instanceKey, StructsSendMediaPayload data) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeySendMediaPostValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a media message. (asynchronously)
     * Sends a media message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendMediaPostAsync(String instanceKey, StructsSendMediaPayload data, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeySendMediaPostValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeySendPollPost
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendPollPostCall(String instanceKey, StructsPollMessagePayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/poll"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeySendPollPostValidateBeforeCall(String instanceKey, StructsPollMessagePayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeySendPollPost(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling instancesInstanceKeySendPollPost(Async)");
        }

        return instancesInstanceKeySendPollPostCall(instanceKey, data, _callback);

    }

    /**
     * Send a Poll message with media.
     * Sends an interactive poll message with a media header to the given user. The poll message is a new feature that is currently in beta.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeySendPollPost(String instanceKey, StructsPollMessagePayload data) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeySendPollPostWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a Poll message with media.
     * Sends an interactive poll message with a media header to the given user. The poll message is a new feature that is currently in beta.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeySendPollPostWithHttpInfo(String instanceKey, StructsPollMessagePayload data) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeySendPollPostValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a Poll message with media. (asynchronously)
     * Sends an interactive poll message with a media header to the given user. The poll message is a new feature that is currently in beta.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendPollPostAsync(String instanceKey, StructsPollMessagePayload data, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeySendPollPostValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeySendTemplateMediaPost
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendTemplateMediaPostCall(String instanceKey, StructsTemplateButtonWithMediaPayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/template-media"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeySendTemplateMediaPostValidateBeforeCall(String instanceKey, StructsTemplateButtonWithMediaPayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeySendTemplateMediaPost(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling instancesInstanceKeySendTemplateMediaPost(Async)");
        }

        return instancesInstanceKeySendTemplateMediaPostCall(instanceKey, data, _callback);

    }

    /**
     * Send a template message with media.
     * Sends an interactive template message with a media header to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeySendTemplateMediaPost(String instanceKey, StructsTemplateButtonWithMediaPayload data) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeySendTemplateMediaPostWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a template message with media.
     * Sends an interactive template message with a media header to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeySendTemplateMediaPostWithHttpInfo(String instanceKey, StructsTemplateButtonWithMediaPayload data) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeySendTemplateMediaPostValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a template message with media. (asynchronously)
     * Sends an interactive template message with a media header to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendTemplateMediaPostAsync(String instanceKey, StructsTemplateButtonWithMediaPayload data, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeySendTemplateMediaPostValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeySendTemplatePost
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendTemplatePostCall(String instanceKey, StructsTemplateButtonPayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/template"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeySendTemplatePostValidateBeforeCall(String instanceKey, StructsTemplateButtonPayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeySendTemplatePost(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling instancesInstanceKeySendTemplatePost(Async)");
        }

        return instancesInstanceKeySendTemplatePostCall(instanceKey, data, _callback);

    }

    /**
     * Send a template message.
     * Sends an interactive template message to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeySendTemplatePost(String instanceKey, StructsTemplateButtonPayload data) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeySendTemplatePostWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a template message.
     * Sends an interactive template message to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeySendTemplatePostWithHttpInfo(String instanceKey, StructsTemplateButtonPayload data) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeySendTemplatePostValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a template message. (asynchronously)
     * Sends an interactive template message to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendTemplatePostAsync(String instanceKey, StructsTemplateButtonPayload data, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeySendTemplatePostValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeySendTextPost
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendTextPostCall(String instanceKey, StructsTextMessage data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/text"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeySendTextPostValidateBeforeCall(String instanceKey, StructsTextMessage data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeySendTextPost(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling instancesInstanceKeySendTextPost(Async)");
        }

        return instancesInstanceKeySendTextPostCall(instanceKey, data, _callback);

    }

    /**
     * Send a text message.
     * Sends a text message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeySendTextPost(String instanceKey, StructsTextMessage data) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeySendTextPostWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a text message.
     * Sends a text message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeySendTextPostWithHttpInfo(String instanceKey, StructsTextMessage data) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeySendTextPostValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a text message. (asynchronously)
     * Sends a text message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendTextPostAsync(String instanceKey, StructsTextMessage data, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeySendTextPostValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeySendUploadPost
     * @param instanceKey Instance key (required)
     * @param type Media type (required)
     * @param instancesInstanceKeySendUploadPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendUploadPostCall(String instanceKey, String type, InstancesInstanceKeySendUploadPostRequest instancesInstanceKeySendUploadPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = instancesInstanceKeySendUploadPostRequest;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/upload"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeySendUploadPostValidateBeforeCall(String instanceKey, String type, InstancesInstanceKeySendUploadPostRequest instancesInstanceKeySendUploadPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeySendUploadPost(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling instancesInstanceKeySendUploadPost(Async)");
        }

        // verify the required parameter 'instancesInstanceKeySendUploadPostRequest' is set
        if (instancesInstanceKeySendUploadPostRequest == null) {
            throw new ApiException("Missing the required parameter 'instancesInstanceKeySendUploadPostRequest' when calling instancesInstanceKeySendUploadPost(Async)");
        }

        return instancesInstanceKeySendUploadPostCall(instanceKey, type, instancesInstanceKeySendUploadPostRequest, _callback);

    }

    /**
     * Upload media.
     * Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
     * @param instanceKey Instance key (required)
     * @param type Media type (required)
     * @param instancesInstanceKeySendUploadPostRequest  (required)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeySendUploadPost(String instanceKey, String type, InstancesInstanceKeySendUploadPostRequest instancesInstanceKeySendUploadPostRequest) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeySendUploadPostWithHttpInfo(instanceKey, type, instancesInstanceKeySendUploadPostRequest);
        return localVarResp.getData();
    }

    /**
     * Upload media.
     * Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
     * @param instanceKey Instance key (required)
     * @param type Media type (required)
     * @param instancesInstanceKeySendUploadPostRequest  (required)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeySendUploadPostWithHttpInfo(String instanceKey, String type, InstancesInstanceKeySendUploadPostRequest instancesInstanceKeySendUploadPostRequest) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeySendUploadPostValidateBeforeCall(instanceKey, type, instancesInstanceKeySendUploadPostRequest, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload media. (asynchronously)
     * Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
     * @param instanceKey Instance key (required)
     * @param type Media type (required)
     * @param instancesInstanceKeySendUploadPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendUploadPostAsync(String instanceKey, String type, InstancesInstanceKeySendUploadPostRequest instancesInstanceKeySendUploadPostRequest, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeySendUploadPostValidateBeforeCall(instanceKey, type, instancesInstanceKeySendUploadPostRequest, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instancesInstanceKeySendVideoPost
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param instancesInstanceKeySendVideoPostRequest  (required)
     * @param caption Attached caption (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendVideoPostCall(String instanceKey, String to, InstancesInstanceKeySendVideoPostRequest instancesInstanceKeySendVideoPostRequest, String caption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = instancesInstanceKeySendVideoPostRequest;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/video"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (caption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caption", caption));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instancesInstanceKeySendVideoPostValidateBeforeCall(String instanceKey, String to, InstancesInstanceKeySendVideoPostRequest instancesInstanceKeySendVideoPostRequest, String caption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling instancesInstanceKeySendVideoPost(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling instancesInstanceKeySendVideoPost(Async)");
        }

        // verify the required parameter 'instancesInstanceKeySendVideoPostRequest' is set
        if (instancesInstanceKeySendVideoPostRequest == null) {
            throw new ApiException("Missing the required parameter 'instancesInstanceKeySendVideoPostRequest' when calling instancesInstanceKeySendVideoPost(Async)");
        }

        return instancesInstanceKeySendVideoPostCall(instanceKey, to, instancesInstanceKeySendVideoPostRequest, caption, _callback);

    }

    /**
     * Send raw video.
     * Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param instancesInstanceKeySendVideoPostRequest  (required)
     * @param caption Attached caption (optional)
     * @return MainAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public MainAPIResponse instancesInstanceKeySendVideoPost(String instanceKey, String to, InstancesInstanceKeySendVideoPostRequest instancesInstanceKeySendVideoPostRequest, String caption) throws ApiException {
        ApiResponse<MainAPIResponse> localVarResp = instancesInstanceKeySendVideoPostWithHttpInfo(instanceKey, to, instancesInstanceKeySendVideoPostRequest, caption);
        return localVarResp.getData();
    }

    /**
     * Send raw video.
     * Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param instancesInstanceKeySendVideoPostRequest  (required)
     * @param caption Attached caption (optional)
     * @return ApiResponse&lt;MainAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MainAPIResponse> instancesInstanceKeySendVideoPostWithHttpInfo(String instanceKey, String to, InstancesInstanceKeySendVideoPostRequest instancesInstanceKeySendVideoPostRequest, String caption) throws ApiException {
        okhttp3.Call localVarCall = instancesInstanceKeySendVideoPostValidateBeforeCall(instanceKey, to, instancesInstanceKeySendVideoPostRequest, caption, null);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send raw video. (asynchronously)
     * Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param instancesInstanceKeySendVideoPostRequest  (required)
     * @param caption Attached caption (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instancesInstanceKeySendVideoPostAsync(String instanceKey, String to, InstancesInstanceKeySendVideoPostRequest instancesInstanceKeySendVideoPostRequest, String caption, final ApiCallback<MainAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = instancesInstanceKeySendVideoPostValidateBeforeCall(instanceKey, to, instancesInstanceKeySendVideoPostRequest, caption, _callback);
        Type localVarReturnType = new TypeToken<MainAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
