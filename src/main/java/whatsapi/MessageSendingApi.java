/*
 * WhatsAPI Go
 * The V2 of WhatsAPI Go
 *
 * The version of the OpenAPI document: 2.0
 * Contact: manjit@sponsorbook.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package whatsapi;

import WhatsAPI.ApiCallback;
import WhatsAPI.ApiClient;
import WhatsAPI.ApiException;
import WhatsAPI.ApiResponse;
import WhatsAPI.Configuration;
import WhatsAPI.Pair;
import WhatsAPI.ProgressRequestBody;
import WhatsAPI.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import models.ButtonMessagePayload;
import models.ButtonMessageWithMediaPayload;
import models.ContactMessagePayload;
import models.ListMessagePayload;
import models.LocationMessagePayload;
import models.ModelAPIResponse;
import models.PollMessagePayload;
import models.SendAudioRequest;
import models.SendDocumentRequest;
import models.SendImageRequest;
import models.SendMediaPayload;
import models.SendVideoRequest;
import models.TemplateButtonPayload;
import models.TemplateButtonWithMediaPayload;
import models.TextMessage;
import models.UploadMediaRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MessageSendingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessageSendingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessageSendingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for sendAudio
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param sendAudioRequest  (required)
     * @param caption Attached caption (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendAudioCall(String instanceKey, String to, SendAudioRequest sendAudioRequest, String caption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendAudioRequest;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/audio"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (caption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caption", caption));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendAudioValidateBeforeCall(String instanceKey, String to, SendAudioRequest sendAudioRequest, String caption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling sendAudio(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling sendAudio(Async)");
        }

        // verify the required parameter 'sendAudioRequest' is set
        if (sendAudioRequest == null) {
            throw new ApiException("Missing the required parameter 'sendAudioRequest' when calling sendAudio(Async)");
        }

        return sendAudioCall(instanceKey, to, sendAudioRequest, caption, _callback);

    }

    /**
     * Send raw audio.
     * Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param sendAudioRequest  (required)
     * @param caption Attached caption (optional)
     * @return ModelAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ModelAPIResponse sendAudio(String instanceKey, String to, SendAudioRequest sendAudioRequest, String caption) throws ApiException {
        ApiResponse<ModelAPIResponse> localVarResp = sendAudioWithHttpInfo(instanceKey, to, sendAudioRequest, caption);
        return localVarResp.getData();
    }

    /**
     * Send raw audio.
     * Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param sendAudioRequest  (required)
     * @param caption Attached caption (optional)
     * @return ApiResponse&lt;ModelAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelAPIResponse> sendAudioWithHttpInfo(String instanceKey, String to, SendAudioRequest sendAudioRequest, String caption) throws ApiException {
        okhttp3.Call localVarCall = sendAudioValidateBeforeCall(instanceKey, to, sendAudioRequest, caption, null);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send raw audio. (asynchronously)
     * Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param sendAudioRequest  (required)
     * @param caption Attached caption (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendAudioAsync(String instanceKey, String to, SendAudioRequest sendAudioRequest, String caption, final ApiCallback<ModelAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendAudioValidateBeforeCall(instanceKey, to, sendAudioRequest, caption, _callback);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendButtonMessage
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendButtonMessageCall(String instanceKey, ButtonMessagePayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/buttons"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendButtonMessageValidateBeforeCall(String instanceKey, ButtonMessagePayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling sendButtonMessage(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling sendButtonMessage(Async)");
        }

        return sendButtonMessageCall(instanceKey, data, _callback);

    }

    /**
     * Send a button message.
     * Sends an interactive button message to the given user. Make sure that all the button ids are unique
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ModelAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ModelAPIResponse sendButtonMessage(String instanceKey, ButtonMessagePayload data) throws ApiException {
        ApiResponse<ModelAPIResponse> localVarResp = sendButtonMessageWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a button message.
     * Sends an interactive button message to the given user. Make sure that all the button ids are unique
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;ModelAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelAPIResponse> sendButtonMessageWithHttpInfo(String instanceKey, ButtonMessagePayload data) throws ApiException {
        okhttp3.Call localVarCall = sendButtonMessageValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a button message. (asynchronously)
     * Sends an interactive button message to the given user. Make sure that all the button ids are unique
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendButtonMessageAsync(String instanceKey, ButtonMessagePayload data, final ApiCallback<ModelAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendButtonMessageValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendButtonWithMedia
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendButtonWithMediaCall(String instanceKey, ButtonMessageWithMediaPayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/button-media"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendButtonWithMediaValidateBeforeCall(String instanceKey, ButtonMessageWithMediaPayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling sendButtonWithMedia(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling sendButtonWithMedia(Async)");
        }

        return sendButtonWithMediaCall(instanceKey, data, _callback);

    }

    /**
     * Send a button message with a media header.
     * Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ModelAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ModelAPIResponse sendButtonWithMedia(String instanceKey, ButtonMessageWithMediaPayload data) throws ApiException {
        ApiResponse<ModelAPIResponse> localVarResp = sendButtonWithMediaWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a button message with a media header.
     * Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;ModelAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelAPIResponse> sendButtonWithMediaWithHttpInfo(String instanceKey, ButtonMessageWithMediaPayload data) throws ApiException {
        okhttp3.Call localVarCall = sendButtonWithMediaValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a button message with a media header. (asynchronously)
     * Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendButtonWithMediaAsync(String instanceKey, ButtonMessageWithMediaPayload data, final ApiCallback<ModelAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendButtonWithMediaValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendContact
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendContactCall(String instanceKey, ContactMessagePayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/contact"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendContactValidateBeforeCall(String instanceKey, ContactMessagePayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling sendContact(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling sendContact(Async)");
        }

        return sendContactCall(instanceKey, data, _callback);

    }

    /**
     * Send a contact message.
     * Sends a contact (vcard) message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ModelAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ModelAPIResponse sendContact(String instanceKey, ContactMessagePayload data) throws ApiException {
        ApiResponse<ModelAPIResponse> localVarResp = sendContactWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a contact message.
     * Sends a contact (vcard) message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;ModelAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelAPIResponse> sendContactWithHttpInfo(String instanceKey, ContactMessagePayload data) throws ApiException {
        okhttp3.Call localVarCall = sendContactValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a contact message. (asynchronously)
     * Sends a contact (vcard) message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendContactAsync(String instanceKey, ContactMessagePayload data, final ApiCallback<ModelAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendContactValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendDocument
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param sendDocumentRequest  (required)
     * @param caption Attached caption (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendDocumentCall(String instanceKey, String to, SendDocumentRequest sendDocumentRequest, String caption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendDocumentRequest;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/document"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (caption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caption", caption));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendDocumentValidateBeforeCall(String instanceKey, String to, SendDocumentRequest sendDocumentRequest, String caption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling sendDocument(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling sendDocument(Async)");
        }

        // verify the required parameter 'sendDocumentRequest' is set
        if (sendDocumentRequest == null) {
            throw new ApiException("Missing the required parameter 'sendDocumentRequest' when calling sendDocument(Async)");
        }

        return sendDocumentCall(instanceKey, to, sendDocumentRequest, caption, _callback);

    }

    /**
     * Send raw document.
     * Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param sendDocumentRequest  (required)
     * @param caption Attached caption (optional)
     * @return ModelAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ModelAPIResponse sendDocument(String instanceKey, String to, SendDocumentRequest sendDocumentRequest, String caption) throws ApiException {
        ApiResponse<ModelAPIResponse> localVarResp = sendDocumentWithHttpInfo(instanceKey, to, sendDocumentRequest, caption);
        return localVarResp.getData();
    }

    /**
     * Send raw document.
     * Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param sendDocumentRequest  (required)
     * @param caption Attached caption (optional)
     * @return ApiResponse&lt;ModelAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelAPIResponse> sendDocumentWithHttpInfo(String instanceKey, String to, SendDocumentRequest sendDocumentRequest, String caption) throws ApiException {
        okhttp3.Call localVarCall = sendDocumentValidateBeforeCall(instanceKey, to, sendDocumentRequest, caption, null);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send raw document. (asynchronously)
     * Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param sendDocumentRequest  (required)
     * @param caption Attached caption (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendDocumentAsync(String instanceKey, String to, SendDocumentRequest sendDocumentRequest, String caption, final ApiCallback<ModelAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendDocumentValidateBeforeCall(instanceKey, to, sendDocumentRequest, caption, _callback);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendImage
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param sendImageRequest  (required)
     * @param caption Attached caption (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendImageCall(String instanceKey, String to, SendImageRequest sendImageRequest, String caption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendImageRequest;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/image"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (caption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caption", caption));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendImageValidateBeforeCall(String instanceKey, String to, SendImageRequest sendImageRequest, String caption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling sendImage(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling sendImage(Async)");
        }

        // verify the required parameter 'sendImageRequest' is set
        if (sendImageRequest == null) {
            throw new ApiException("Missing the required parameter 'sendImageRequest' when calling sendImage(Async)");
        }

        return sendImageCall(instanceKey, to, sendImageRequest, caption, _callback);

    }

    /**
     * Send raw image.
     * Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param sendImageRequest  (required)
     * @param caption Attached caption (optional)
     * @return ModelAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ModelAPIResponse sendImage(String instanceKey, String to, SendImageRequest sendImageRequest, String caption) throws ApiException {
        ApiResponse<ModelAPIResponse> localVarResp = sendImageWithHttpInfo(instanceKey, to, sendImageRequest, caption);
        return localVarResp.getData();
    }

    /**
     * Send raw image.
     * Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param sendImageRequest  (required)
     * @param caption Attached caption (optional)
     * @return ApiResponse&lt;ModelAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelAPIResponse> sendImageWithHttpInfo(String instanceKey, String to, SendImageRequest sendImageRequest, String caption) throws ApiException {
        okhttp3.Call localVarCall = sendImageValidateBeforeCall(instanceKey, to, sendImageRequest, caption, null);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send raw image. (asynchronously)
     * Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param sendImageRequest  (required)
     * @param caption Attached caption (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendImageAsync(String instanceKey, String to, SendImageRequest sendImageRequest, String caption, final ApiCallback<ModelAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendImageValidateBeforeCall(instanceKey, to, sendImageRequest, caption, _callback);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendListMessage
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendListMessageCall(String instanceKey, ListMessagePayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/list"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendListMessageValidateBeforeCall(String instanceKey, ListMessagePayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling sendListMessage(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling sendListMessage(Async)");
        }

        return sendListMessageCall(instanceKey, data, _callback);

    }

    /**
     * Send a List message.
     * Sends an interactive List message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ModelAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ModelAPIResponse sendListMessage(String instanceKey, ListMessagePayload data) throws ApiException {
        ApiResponse<ModelAPIResponse> localVarResp = sendListMessageWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a List message.
     * Sends an interactive List message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;ModelAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelAPIResponse> sendListMessageWithHttpInfo(String instanceKey, ListMessagePayload data) throws ApiException {
        okhttp3.Call localVarCall = sendListMessageValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a List message. (asynchronously)
     * Sends an interactive List message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendListMessageAsync(String instanceKey, ListMessagePayload data, final ApiCallback<ModelAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendListMessageValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendLocation
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendLocationCall(String instanceKey, LocationMessagePayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/location"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendLocationValidateBeforeCall(String instanceKey, LocationMessagePayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling sendLocation(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling sendLocation(Async)");
        }

        return sendLocationCall(instanceKey, data, _callback);

    }

    /**
     * Send a location message.
     * Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ModelAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ModelAPIResponse sendLocation(String instanceKey, LocationMessagePayload data) throws ApiException {
        ApiResponse<ModelAPIResponse> localVarResp = sendLocationWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a location message.
     * Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;ModelAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelAPIResponse> sendLocationWithHttpInfo(String instanceKey, LocationMessagePayload data) throws ApiException {
        okhttp3.Call localVarCall = sendLocationValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a location message. (asynchronously)
     * Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendLocationAsync(String instanceKey, LocationMessagePayload data, final ApiCallback<ModelAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendLocationValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendMediaMessage
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendMediaMessageCall(String instanceKey, SendMediaPayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/media"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendMediaMessageValidateBeforeCall(String instanceKey, SendMediaPayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling sendMediaMessage(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling sendMediaMessage(Async)");
        }

        return sendMediaMessageCall(instanceKey, data, _callback);

    }

    /**
     * Send a media message.
     * Sends a media message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ModelAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ModelAPIResponse sendMediaMessage(String instanceKey, SendMediaPayload data) throws ApiException {
        ApiResponse<ModelAPIResponse> localVarResp = sendMediaMessageWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a media message.
     * Sends a media message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;ModelAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelAPIResponse> sendMediaMessageWithHttpInfo(String instanceKey, SendMediaPayload data) throws ApiException {
        okhttp3.Call localVarCall = sendMediaMessageValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a media message. (asynchronously)
     * Sends a media message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendMediaMessageAsync(String instanceKey, SendMediaPayload data, final ApiCallback<ModelAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendMediaMessageValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendPollMessage
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendPollMessageCall(String instanceKey, PollMessagePayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/poll"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendPollMessageValidateBeforeCall(String instanceKey, PollMessagePayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling sendPollMessage(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling sendPollMessage(Async)");
        }

        return sendPollMessageCall(instanceKey, data, _callback);

    }

    /**
     * Send a Poll message.
     * Sends an interactive poll message to the given user. The poll message is a new feature that is currently in beta.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ModelAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ModelAPIResponse sendPollMessage(String instanceKey, PollMessagePayload data) throws ApiException {
        ApiResponse<ModelAPIResponse> localVarResp = sendPollMessageWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a Poll message.
     * Sends an interactive poll message to the given user. The poll message is a new feature that is currently in beta.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;ModelAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelAPIResponse> sendPollMessageWithHttpInfo(String instanceKey, PollMessagePayload data) throws ApiException {
        okhttp3.Call localVarCall = sendPollMessageValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a Poll message. (asynchronously)
     * Sends an interactive poll message to the given user. The poll message is a new feature that is currently in beta.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendPollMessageAsync(String instanceKey, PollMessagePayload data, final ApiCallback<ModelAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendPollMessageValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendTemplate
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendTemplateCall(String instanceKey, TemplateButtonPayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/template"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendTemplateValidateBeforeCall(String instanceKey, TemplateButtonPayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling sendTemplate(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling sendTemplate(Async)");
        }

        return sendTemplateCall(instanceKey, data, _callback);

    }

    /**
     * Send a template message.
     * Sends an interactive template message to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ModelAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ModelAPIResponse sendTemplate(String instanceKey, TemplateButtonPayload data) throws ApiException {
        ApiResponse<ModelAPIResponse> localVarResp = sendTemplateWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a template message.
     * Sends an interactive template message to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;ModelAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelAPIResponse> sendTemplateWithHttpInfo(String instanceKey, TemplateButtonPayload data) throws ApiException {
        okhttp3.Call localVarCall = sendTemplateValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a template message. (asynchronously)
     * Sends an interactive template message to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendTemplateAsync(String instanceKey, TemplateButtonPayload data, final ApiCallback<ModelAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendTemplateValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendTemplateWithMedia
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendTemplateWithMediaCall(String instanceKey, TemplateButtonWithMediaPayload data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/template-media"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendTemplateWithMediaValidateBeforeCall(String instanceKey, TemplateButtonWithMediaPayload data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling sendTemplateWithMedia(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling sendTemplateWithMedia(Async)");
        }

        return sendTemplateWithMediaCall(instanceKey, data, _callback);

    }

    /**
     * Send a template message with media.
     * Sends an interactive template message with a media header to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ModelAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ModelAPIResponse sendTemplateWithMedia(String instanceKey, TemplateButtonWithMediaPayload data) throws ApiException {
        ApiResponse<ModelAPIResponse> localVarResp = sendTemplateWithMediaWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a template message with media.
     * Sends an interactive template message with a media header to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;ModelAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelAPIResponse> sendTemplateWithMediaWithHttpInfo(String instanceKey, TemplateButtonWithMediaPayload data) throws ApiException {
        okhttp3.Call localVarCall = sendTemplateWithMediaValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a template message with media. (asynchronously)
     * Sends an interactive template message with a media header to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendTemplateWithMediaAsync(String instanceKey, TemplateButtonWithMediaPayload data, final ApiCallback<ModelAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendTemplateWithMediaValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendTextMessage
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendTextMessageCall(String instanceKey, TextMessage data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/text"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendTextMessageValidateBeforeCall(String instanceKey, TextMessage data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling sendTextMessage(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling sendTextMessage(Async)");
        }

        return sendTextMessageCall(instanceKey, data, _callback);

    }

    /**
     * Send a text message.
     * Sends a text message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ModelAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ModelAPIResponse sendTextMessage(String instanceKey, TextMessage data) throws ApiException {
        ApiResponse<ModelAPIResponse> localVarResp = sendTextMessageWithHttpInfo(instanceKey, data);
        return localVarResp.getData();
    }

    /**
     * Send a text message.
     * Sends a text message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @return ApiResponse&lt;ModelAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelAPIResponse> sendTextMessageWithHttpInfo(String instanceKey, TextMessage data) throws ApiException {
        okhttp3.Call localVarCall = sendTextMessageValidateBeforeCall(instanceKey, data, null);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send a text message. (asynchronously)
     * Sends a text message to the given user.
     * @param instanceKey Instance key (required)
     * @param data Message data (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendTextMessageAsync(String instanceKey, TextMessage data, final ApiCallback<ModelAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendTextMessageValidateBeforeCall(instanceKey, data, _callback);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendVideo
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param sendVideoRequest  (required)
     * @param caption Attached caption (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendVideoCall(String instanceKey, String to, SendVideoRequest sendVideoRequest, String caption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendVideoRequest;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/video"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (caption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caption", caption));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendVideoValidateBeforeCall(String instanceKey, String to, SendVideoRequest sendVideoRequest, String caption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling sendVideo(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling sendVideo(Async)");
        }

        // verify the required parameter 'sendVideoRequest' is set
        if (sendVideoRequest == null) {
            throw new ApiException("Missing the required parameter 'sendVideoRequest' when calling sendVideo(Async)");
        }

        return sendVideoCall(instanceKey, to, sendVideoRequest, caption, _callback);

    }

    /**
     * Send raw video.
     * Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param sendVideoRequest  (required)
     * @param caption Attached caption (optional)
     * @return ModelAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ModelAPIResponse sendVideo(String instanceKey, String to, SendVideoRequest sendVideoRequest, String caption) throws ApiException {
        ApiResponse<ModelAPIResponse> localVarResp = sendVideoWithHttpInfo(instanceKey, to, sendVideoRequest, caption);
        return localVarResp.getData();
    }

    /**
     * Send raw video.
     * Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param sendVideoRequest  (required)
     * @param caption Attached caption (optional)
     * @return ApiResponse&lt;ModelAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelAPIResponse> sendVideoWithHttpInfo(String instanceKey, String to, SendVideoRequest sendVideoRequest, String caption) throws ApiException {
        okhttp3.Call localVarCall = sendVideoValidateBeforeCall(instanceKey, to, sendVideoRequest, caption, null);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send raw video. (asynchronously)
     * Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key (required)
     * @param to The recipient&#39;s number (required)
     * @param sendVideoRequest  (required)
     * @param caption Attached caption (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendVideoAsync(String instanceKey, String to, SendVideoRequest sendVideoRequest, String caption, final ApiCallback<ModelAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendVideoValidateBeforeCall(instanceKey, to, sendVideoRequest, caption, _callback);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadMedia
     * @param instanceKey Instance key (required)
     * @param type Media type (required)
     * @param uploadMediaRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadMediaCall(String instanceKey, String type, UploadMediaRequest uploadMediaRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadMediaRequest;

        // create path and map variables
        String localVarPath = "/instances/{instance_key}/send/upload"
            .replace("{" + "instance_key" + "}", localVarApiClient.escapeString(instanceKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadMediaValidateBeforeCall(String instanceKey, String type, UploadMediaRequest uploadMediaRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceKey' is set
        if (instanceKey == null) {
            throw new ApiException("Missing the required parameter 'instanceKey' when calling uploadMedia(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling uploadMedia(Async)");
        }

        // verify the required parameter 'uploadMediaRequest' is set
        if (uploadMediaRequest == null) {
            throw new ApiException("Missing the required parameter 'uploadMediaRequest' when calling uploadMedia(Async)");
        }

        return uploadMediaCall(instanceKey, type, uploadMediaRequest, _callback);

    }

    /**
     * Upload media.
     * Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
     * @param instanceKey Instance key (required)
     * @param type Media type (required)
     * @param uploadMediaRequest  (required)
     * @return ModelAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ModelAPIResponse uploadMedia(String instanceKey, String type, UploadMediaRequest uploadMediaRequest) throws ApiException {
        ApiResponse<ModelAPIResponse> localVarResp = uploadMediaWithHttpInfo(instanceKey, type, uploadMediaRequest);
        return localVarResp.getData();
    }

    /**
     * Upload media.
     * Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
     * @param instanceKey Instance key (required)
     * @param type Media type (required)
     * @param uploadMediaRequest  (required)
     * @return ApiResponse&lt;ModelAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelAPIResponse> uploadMediaWithHttpInfo(String instanceKey, String type, UploadMediaRequest uploadMediaRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadMediaValidateBeforeCall(instanceKey, type, uploadMediaRequest, null);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload media. (asynchronously)
     * Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
     * @param instanceKey Instance key (required)
     * @param type Media type (required)
     * @param uploadMediaRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Instance not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadMediaAsync(String instanceKey, String type, UploadMediaRequest uploadMediaRequest, final ApiCallback<ModelAPIResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadMediaValidateBeforeCall(instanceKey, type, uploadMediaRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelAPIResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
